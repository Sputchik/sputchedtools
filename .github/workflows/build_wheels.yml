name: Build Wheels

on:
  push:
    branches: ['releases']
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to PyPI'
        type: boolean
        required: false
        default: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # if: startsWith(github.event.head_commit.message, '0.') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: actions/setup-python@v4 
        with:
          python-version: '3.x'
          cache: 'pip'  # Enable pip caching built into setup-python
          cache-dependency-path: |
            **/pyproject.toml
            **/setup.py

      - name: Cache virtual environments
        uses: actions/cache@v3
        with:
          path: |
            ~/.local
            ~/.cache/virtualenv
            ~/.cache/cibuildwheel
          key: ${{ runner.os }}-venv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Cache Cython artifacts
        uses: actions/cache@v3
        with:
          path: sputchedtools_original/.cython_cache
          key: ${{ runner.os }}-cython-${{ hashFiles('sputchedtools_original/src/**') }}
          restore-keys: |
            ${{ runner.os }}-cython-

      - name: Cache NuGet packages
        if: runner.os == 'Windows'
        uses: actions/cache@v3
        with:
          path: |
            ~\.nuget\packages
            C:\Users\runneradmin\AppData\Local\pypa\cibuildwheel\Cache\nuget-cpython
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.whl') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install build dependencies
        run: python -m pip install --upgrade pip build cibuildwheel

      - name: Build wheels
        env:
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_ARCHS_LINUX: "${{ runner.os == 'Linux' && 'x86_64' || '' }}"
          CIBW_ARCHS_MACOS: "arm64"
          CIBW_ARCHS_WINDOWS: "AMD64 ARM64"
          CIBW_BEFORE_ALL_LINUX: >
            if command -v apt-get >/dev/null; then
              apt-get update && apt-get install -y python3-dev build-essential
            elif command -v yum >/dev/null; then
              yum install -y python3-devel gcc gcc-c++ 
            fi
          CIBW_ENVIRONMENT: "CYTHONIZE=1"
        run: |
          cd sputchedtools_original
          cibuildwheel --output-dir ../dist

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: |
            **/pyproject.toml
            **/setup.py

      - name: Build sdist and pure wheel
        run: |
          cd sputchedtools_original
          python -m pip install --upgrade pip build
          python -m build --sdist --wheel --outdir ../dist
          
      - uses: actions/upload-artifact@v3
        with:
          name: distributions
          path: dist/*
  
  collect_wheels:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Move wheels to single directory
        run: |
          mkdir -p all_wheels
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec mv {} all_wheels/ \;
          ls -la all_wheels/

      - name: Upload combined wheels
        uses: actions/upload-artifact@v3
        with:
          name: all-wheels
          path: all_wheels/*

  publish:
    needs: [build_wheels, build_sdist, collect_wheels]
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.publish == 'true' || startsWith(github.event.head_commit.message, '0.')

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Move wheels to dist
        run: |
          mkdir -p dist_combined
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec mv {} dist_combined/ \;
          ls -la dist_combined/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI }}
          packages-dir: dist_combined/
